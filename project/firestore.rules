rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidColor(color) {
      return color.matches('^#[0-9A-Fa-f]{6}$');
    }

    function isValidCategoryName(name) {
      return name.size() >= 2 && 
             name.size() <= 30 && 
             name.matches('^[a-zA-Z0-9\\s-]+$');
    }

    // Categories collection rules
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidCategoryName(request.resource.data.name)
        && isValidColor(request.resource.data.color);

      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && (!resource.data.isDefault || request.auth.token.admin == true)
        && (
          !request.resource.data.keys().hasAny(['name']) || 
          isValidCategoryName(request.resource.data.name)
        )
        && (
          !request.resource.data.keys().hasAny(['color']) || 
          isValidColor(request.resource.data.color)
        );

      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid 
        && !resource.data.isDefault;
    }

    // Products collection rules with category validation
    match /products/{productId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && exists(/databases/$(database)/documents/categories/$(request.resource.data.categoryId));
      
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }
  }
} 